---
---
:ruby
  review = Movielog.reviews[review.sequence]
  content_for(:title, "#{review.display_title} Movie Review")
  aka_titles = MovieDb.aka_titles_for_title(db: Movielog.db, title: review.title, display_title: review.display_title)
  viewings = Movielog.viewings_for_title(title: review.title)
  directors = MovieDb.directors_for_title(db: Movielog.db, title: review.title)
  director_slug = directors.map { |d| "#{d.first_name} #{d.last_name}" }.to_sentence
  title_no_year = review.display_title.reverse.gsub(/^(.*\d{4}[(] )/, '').reverse
  description = review.pull_quote.gsub( "_#{title_no_year}_", title_no_year.upcase )
  meta_description = escape_html(description_for_review(review: review)).gsub( "_#{title_no_year}_", "&#34;#{title_no_year}&#34;").html_safe
- content_for(:head) do

  %meta{ name: 'description', content: meta_description }
  %meta{ property: 'og:title', content: review.display_title }
  %meta{ property: 'og:url', content: "https://www.franksmovielog.com/reviews/#{review.slug}" }
  %meta{ property: 'og:image', content: review.backdrop }
  %meta{ property: 'og:description', content: description }
  %meta{ name: 'twitter:card', content: 'summary_large_image' }
  %meta{ name: 'twitter:site', content: '@franksmovielog' }
  %meta{ name: 'twitter:title', content: review.display_title }
  %meta{ name: 'twitter:description', content: description }
  %meta{ name: 'twitter:image', content: review.backdrop }


%article.post{ itemscope: true, itemtype: 'http://schema.org/Review' }
  - if review.backdrop
    .post_backdrop{ data: { backdrop: review.backdrop } }

  %h1.post_title= review.display_title

  - if aka_titles.any?
    %dl.review_aka_list
      %dt.review_aka_list-heading aka
      - aka_titles.each do |aka_title|
        %dd.review_aka_list-item= aka_title unless aka_title == review.display_title

  .review_directed_by Directed by #{director_slug}

  %div{ itemprop: 'reviewRating', itemscope: true, itemtype: 'http://schema.org/Rating' }
    %meta{ content: Movielog::ConvertGradeToNumber.call(grade: review.grade) / 3, itemprop: 'ratingValue' }
    = grade_to_image_tag(grade: review.grade, options: { class: 'review_rating' })

  .post_content{ itemprop: 'reviewBody' }
    = markdown(review.content)
  %meta{ content: review.date.iso8601, itemprop: 'datepublished'}
  %meta{ itemprop: 'description', content: description }
  %span{ itemprop: 'author', itemscope: true, itemtype: 'http://schema.org/Person' }
    %meta{ content: 'Frank Showalter', itemprop: 'name' }
    %meta{ content: 'http://www.frankshowalter.com', itemprop: 'sameAs' }
  %span{ itemprop: 'publisher', itemscope: true, itemtype: 'http://schema.org/Organization' }
    %meta{ content: "Frank's Movie Log", itemprop: 'name' }
    %meta{ content: 'https://www.franksmovielog.com', itemprop: 'sameAs' }
  %p.post_slug{ itemprop: 'itemReviewed', itemscope: true, itemtype: 'http://schema.org/Movie' }
    = "<span itemprop='name'>#{review.display_title}</span> was reviewed on #{review.date.strftime('%b %-d, %Y')}. "
    = "I've seen it "
    %a{ href: "/viewings/?title=#{URI.escape(review.display_title)}", data: { no_instant: true } }
      = "#{pluralize(viewings.length, 'time')}. "
    = "More at the "
    %a{ itemprop: 'sameAs', href: "http://www.imdb.com/title/#{review.imdb_id}/" }
      IMDb
    = "."
    - more_for_cast = Movielog::Db::QueryRelatedTitlesByCast.call(db: Movielog.db, title: review.title)
- unless more_for_cast.empty?
  - more_for_cast.each do |performer, titles|
    - next unless titles.length > 1
    %h2.footer_header.review_more_header
      More with #{performer.first_name} #{performer.last_name}
    %ul.recent_posts_list.card--with_shadow.review_more_list
      - titles.each do |title|
        - related_review = Movielog.reviews_by_title[title]
        - directors = MovieDb.directors_for_title(db: Movielog.db, title: related_review.title)
        %li.card{ class: "#{'half' if titles.length == 2 }"}
          .card_header_wrap{ data: { carnac: true } }
            .card_header
              %h3.card_header-title
                %a{ href: "/reviews/#{related_review.slug}/"}
                  = "#{related_review.display_title}"
              = grade_to_image_tag(grade: related_review.grade, options: { class: 'card_header-rating' })
            .card_backdrop{ data: { backdrop: related_review.backdrop } }
            .card_slug
              = ' D:'
              = " #{directors.map { |d| "<span class='name'>#{d.first_name} #{d.last_name}</span>" }.to_sentence}. "
              = " #{headline_cast(title: related_review.title)}."
          .card_text
            = markdown(related_review.pull_quote)
          .card_actions
            %a{ href: "/reviews/#{related_review.slug}/", title: "Continue reading #{related_review.display_title.upcase}" }
              Continue reading
            &nbsp;&middot; #{minutes_to_read(related_review.content)} min read

= partial(:post_navigation, locals: { current_post: review })

- content_for(:footer) do
  %script{ type: 'application/ld+json' }
    :plain
      {
        "@context":"http://schema.org",
        "@type":"Review",
        "author":{
          "@type":"Person",
          "name":"Frank Showalter",
          "sameAs":"https://www.frankshowalter.com"
        },
        "datePublished":"#{review.date.iso8601}",
        "description":"#{description}",
        "inLanguage":"en",
        "itemReviewed":{
          "@type":"Movie",
          "name":"#{review.display_title}",
          "sameAs":"http://www.imdb.com/title/#{review.imdb_id}/"
        },
        "publisher":{
          "@type":"Organization",
          "name":"Frank's Movie Log",
          "sameAs":"http://www.franksmovielog.com"
        },
        "reviewRating":{
          "@type":"Rating",
          "ratingValue": #{Movielog::ConvertGradeToNumber.call(grade: review.grade) / 3}
        }
      }

