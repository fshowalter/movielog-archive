---
---
:ruby
  review = Movielog.reviews[review.sequence]
  content_for(:title, "#{review.display_title} Movie Review")
  aka_titles = MovieDb.aka_titles_for_title(db: Movielog.db, title: review.title, display_title: review.display_title)
  viewings = Movielog.viewings_for_title(title: review.title)
  headline_cast = MovieDb.headline_cast_for_title(db: Movielog.db, title: review.title)
  directors = MovieDb.directors_for_title(db: Movielog.db, title: review.title)
  director_slug = directors.map { |d| "<span class='name'>#{d.first_name} #{d.last_name}</span>" }.to_sentence
  writers = MovieDb.writers_for_title(db: Movielog.db, title: review.title)
  content_for(
    :description,
    description_for_review(review: review, aka_titles: aka_titles, headline_cast: headline_cast))

%article.review{ itemscope: true, itemtype: 'http://schema.org/Review' }
  - if review.backdrop
    .review-backdrop{ data: { backdrop: review.backdrop } }

  %h1.page-title{ itemprop: 'name', data: { rhythm: 0 } }= review.display_title

  - if aka_titles.any?
    %dl.review-aka-list
      %dt.review-aka-list-heading aka
      - aka_titles.each do |aka_title|
        %dd.review-aka-list-item= aka_title unless aka_title == review.display_title

  .review-directed-by Directed by #{director_slug}

  .review-rating{ itemprop: 'reviewRating', itemscope: true, itemtype: 'http://schema.org/Rating' }
    %meta{ content: Movielog::ConvertGradeToNumber.call(grade: review.grade) / 3.0,
           itemprop: 'ratingValue' }
    %meta{ content: '0', itemprop: 'worstRating' }
    %meta{ content: '5', itemprop: 'bestRating' }
    = grade_to_image_tag(grade: review.grade)

  .post-content{ itemprop: 'reviewBody', data: { rhythm: 0 } }
    = markdown(review.content)
  %meta{ content: review.date.iso8601, itemprop: 'datepublished'}
  %span{ itemprop: 'author', itemscope: true, itemtype: 'http://schema.org/Person' }
    %meta{ content: 'Frank Showalter', itemprop: 'name' }
  %p.review-actions
    = "<span>#{review.display_title}</span> was reviewed on #{review.date.strftime('%b %-d, %Y')}. "
    = "I've seen it "
    %a{ href: "/viewings/?title=#{URI.escape(review.display_title)}", data: { no_instant: true } }
      = "#{pluralize(viewings.length, 'time')}. "
    = "More at the "
    %a{ href: "http://www.imdb.com/title/#{review.imdb_id}", data: { no_instant: true} } 
      IMDb
    = "."

- content_for(:footer) do
  .footer__recent-updates
    %h2.footer__header 
      Recent Posts
    %ol.footer__recent-updates__list
      - post_count = 1;
      - post = nil
      - sorted_posts.each do |post_key|
        - post = Movielog.posts[post_key]
        - next if post_key == review.sequence
        - break if post_count > 4
        - post_count = post_count + 1
        - if post.is_a?(Movielog::Review)
          - directors = MovieDb.directors_for_title(db: Movielog.db, title: post.title)
          %li.footer__recent-updates__list__item
            %a.footer__recent-updates__list__item__link{ href: "/reviews/#{post.slug}/"}
              .footer__recent-updates__list__item__header
                %h3.footer__recent-updates__list__item__title{ data: { sequence: post.sequence} }
                  = "#{post.display_title}"
                = grade_to_image_tag(grade: post.grade, options: { class: 'footer__recent-updates__list__item__rating' })
              .footer__recent-updates__list__item__backdrop{ data: { backdrop: post.backdrop } }
              .footer__recent-updates__list__item__slug
                = ' D:'
                = " #{directors.map { |d| "<span class='name'>#{d.first_name} #{d.last_name}</span>" }.to_sentence}. "
                = " #{headline_cast(title: post.title)}."

    %a.footer__recent-updates__more_link{ href: "/##{post.slug}"}
      See More

